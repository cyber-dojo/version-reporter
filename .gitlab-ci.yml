image: registry.gitlab.com/cyber-dojo/version-reporter:v1

.only-main:
 only:
  - main

stages:
  - kosli-flow
  - build-image
  - test-image
  - sdlc-gate
  - deploy-image

variables:
  KOSLI_DRY_RUN: "False"
  KOSLI_ORG: cyber-dojo
  KOSLI_FLOW: version-reporter
  DOCKER_TLS_CERTDIR: "/certs"

.deployment-job:
  stage: deploy-image
  artifacts:
    paths: [ output/ ]
  script:
    - kosli expect deployment $(cat output/tagged_image)
        --fingerprint=$(cat output/fingerprint)
        --description "Deployed to ${KOSLI_ENVIRONMENT_NAME} in Gitlab pipeline"
        --environment ${KOSLI_ENVIRONMENT_NAME}
    - export TF_VAR_TAGGED_IMAGE=$(cat output/tagged_image)
    - cd deployment/terraform && tf.sh apply

create-kosli-flow:
  extends: [.only-main]
  stage: kosli-flow
  script:
    - kosli create flow $KOSLI_FLOW
        --description="UX for git+image version-reporter"
        --template=artifact,branch-coverage,security-scan,pull-request

build-job:
  extends: [.only-main]
  stage: build-image
  needs: [ "create-kosli-flow" ]
  services: [ "docker:24.0.5-dind" ]
  artifacts:
    paths: [ output/ ]
  script:
    - source ./sh/echo_versioner_env_vars.sh
    - export $(echo_versioner_env_vars)
    - docker-compose build --build-arg COMMIT_SHA=$CI_COMMIT_SHA
    - TAGGED_IMAGE=cyberdojo/version-reporter:${CI_COMMIT_SHA:0:7}
    - echo "${DOCKER_PASS}" | docker login --username "${DOCKER_USER}" --password-stdin
    - docker push $TAGGED_IMAGE
    - kosli report artifact $TAGGED_IMAGE --artifact-type=docker
    - FINGERPRINT=$(kosli fingerprint $TAGGED_IMAGE --artifact-type=docker)
    - mkdir output
    - echo $FINGERPRINT  > output/fingerprint
    - echo $TAGGED_IMAGE > output/tagged_image

branch-coverage-job:
  extends: [.only-main]
  stage: test-image
  needs: [ "build-job" ]
  services: [ "docker:24.0.5-dind" ]
  artifacts:
    paths: [ output/ ]
  script:
    - source ./sh/run_tests_with_coverage.sh
    - if run_tests_with_coverage; then KOSLI_COMPLIANT=true; else KOSLI_COMPLIANT=false; fi
    - kosli report evidence artifact generic $(cat output/tagged_image)
          --fingerprint=$(cat output/fingerprint)
          --compliant=$KOSLI_COMPLIANT
          --description="server & client branch-coverage reports"
          --name=branch-coverage
          --user-data=./test/evidence.json

security-scan-job:
  extends: [.only-main]
  image: registry.gitlab.com/cyber-dojo/version-reporter:v1-ubuntu
  stage: test-image
  needs: [ "build-job" ]
  artifacts:
    paths: [ output/ ]
  script:
    - set +e
    - snyk container test $(cat output/tagged_image)
        --file=Dockerfile
        --json-file-output=snyk.json
        --policy-path=.snyk
    - kosli report evidence artifact snyk $(cat output/tagged_image)
        --fingerprint=$(cat output/fingerprint)
        --name=security-scan
        --scan-results=snyk.json

pull-request-job:
  extends: [.only-main]
  stage: test-image
  needs: [ "build-job" ]
  artifacts:
    paths: [ output/ ]
  script:
    - kosli report evidence artifact pullrequest gitlab $(cat output/tagged_image)
        --fingerprint=$(cat output/fingerprint)
        --name=pull-request
        --gitlab-token=$KOSLI_GITLAB_TOKEN

sdlc-gate-job:
  extends: [.only-main]
  stage: sdlc-gate
  needs:
    - branch-coverage-job
    - security-scan-job
    - pull-request-job
  artifacts:
    paths: [ output/ ]
  script:
    - kosli assert artifact $(cat output/tagged_image)
        --fingerprint=$(cat output/fingerprint)

beta-deployment-job:
  extends: [.only-main, .deployment-job]
  needs: [ "sdlc-gate-job" ]
  variables:
    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID_BETA}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY_BETA}
    KOSLI_ENVIRONMENT_NAME: aws-beta

approval-job:
  extends: [.only-main]
  needs: [ "beta-deployment-job" ]
  stage: deploy-image
  artifacts:
    paths: [ output/ ]
  when: manual
  allow_failure: false
  script:
    - kosli report approval $(cat output/tagged_image)
        --fingerprint=$(cat output/fingerprint)
        --description="Approved in Gitlab pipeline"
        --oldest-commit=origin/production

prod-deployment-job:
  extends: [.only-main, .deployment-job]
  needs: [ "approval-job" ]
  variables:
    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID_PROD}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY_PROD}
    KOSLI_ENVIRONMENT_NAME: aws-prod

#update-git-tracking-branch:
#  extends: [.only-main]
#  needs: [ "prod-deployment-job" ]
#  stage: deploy-image
#  script:
#    - git log --graph --full-history --all --color --date=short --pretty=format:"%Cred%x09%h %Creset%ad%Cblue%d %Creset %s %C(bold)(%an)%Creset" | head -n 30
#    - git checkout --track origin/production
#    - git merge --ff-only ${CI_COMMIT_SHA}
#    - git push origin production

push-latest-image:
  extends: [.only-main]
  needs: [ "update-git-tracking-branch" ]
  services: [ "docker:24.0.5-dind" ]
  stage: deploy-image
  artifacts:
    paths: [ output/ ]
  script:
    - docker pull $(cat output/tagged_image)
    - docker tag $(cat output/tagged_image) cyberdojo/version-reporter:latest
    - echo "${DOCKER_PASS}" | docker login --username "${DOCKER_USER}" --password-stdin
    - docker push cyberdojo/version-reporter:latest
