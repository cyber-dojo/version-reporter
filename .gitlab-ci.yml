image: registry.gitlab.com/cyber-dojo/version-reporter:v1
stages:
  - .pre
  - build
  - test

variables:
  KOSLI_DRY_RUN: "False"
  KOSLI_ORG: cyber-dojo
  KOSLI_FLOW: version-reporter
  DOCKER_TLS_CERTDIR: "/certs"

#create-kosli-flow:
#  stage: .pre
#  script:
#    - kosli create flow $KOSLI_FLOW
#        --api-token=$KOSLI_API_TOKEN
#        --description="UX for git+image version-reporter"
#        --template=artifact,branch-coverage,security-scan,pull-request

build-job:
  stage: build
  services:
    - docker:24.0.5-dind
  script:
    - source ./sh/echo_versioner_env_vars.sh
    - export $(echo_versioner_env_vars)
    - docker-compose build --build-arg COMMIT_SHA=$CI_COMMIT_SHA
    - IMAGE_TAG=${CI_COMMIT_SHA:0:7}
    - echo "${DOCKER_PASS}" | docker login --username "${DOCKER_USER}" --password-stdin
    - docker push cyberdojo/version-reporter:$IMAGE_TAG
    - kosli report artifact cyberdojo/version-reporter:$IMAGE_TAG --artifact-type=docker
    - FINGERPRINT=$(kosli fingerprint cyberdojo/version-reporter:$IMAGE_TAG --artifact-type=docker)
    - mkdir outputs
    - echo $FINGERPRINT > outputs/fingerprint
    - cat outputs/fingerprint
  artifacts:
    paths: [ output/ ]

branch-coverage-job:
  stage: test
  services:
    - docker:24.0.5-dind
  needs: ["build-job"]
  script:
    - source ./sh/run_tests_with_coverage.sh
    - if run_tests_with_coverage; then KOSLI_COMPLIANT=true; else KOSLI_COMPLIANT=false; fi
    - IMAGE_TAG=${CI_COMMIT_SHA:0:7}
    - kosli report evidence artifact generic cyberdojo/version-reporter:$IMAGE_TAG
          --artifact-type=docker
          --compliant=$KOSLI_COMPLIANT
          --description="server & client branch-coverage reports"
          --name=branch-coverage
          --user-data=./test/evidence.json

security-scan-job:
 stage: test
 services:
   - docker:24.0.5-dind
 needs: ["build-job"]
 script:
   - set +e
   - ls -la /bin/
   - snyk --version
   - cat outputs/fingerprint

#    - IMAGE_TAG=${CI_COMMIT_SHA:0:7}
#    - docker pull cyberdojo/version-reporter:$IMAGE_TAG
#    - snyk container test cyberdojo/version-reporter:$IMAGE_TAG
#        --file=Dockerfile
#        --json-file-output=snyk.json
#        --policy-path=.snyk
#    - kosli report evidence artifact snyk cyberdojo/version-reporter:$IMAGE_TAG
#        --artifact-type=docker
#        --name=security-scan
#        --scan-results=snyk.json

#pull-request-job:
#  stage: test
#  services:
#    - docker:24.0.5-dind
#  needs: [ "build-job" ]
#  script:
#    - IMAGE_TAG=${CI_COMMIT_SHA:0:7}
#    - docker pull cyberdojo/version-reporter:$IMAGE_TAG
#    - kosli report evidence artifact pullrequest gitlab cyberdojo/version-reporter:$IMAGE_TAG
#        --artifact-type=docker
#        --name=pull-request
#        --gitlab-token=?????

#sdlc-gate-job:
#  needs:
#    - branch-coverage-job
#    - security-scan-job
#    - pull-request-job
#  stage: test
#  services:
#    - docker:24.0.5-dind
#  script:
#    - IMAGE_TAG=${CI_COMMIT_SHA:0:7}
#    - docker pull cyberdojo/version-reporter:$IMAGE_TAG
#    - kosli assert artifact cyberdojo/version-reporter:$IMAGE_TAG
#        --artifact-type docker

#beta-deployment-job:
#  needs: ["sdlc-gate-job"]
#  stage: deployment
#  services:
#    - docker:24.0.5-dind
#  script:
#    - IMAGE_TAG=${CI_COMMIT_SHA:0:7}
#    - docker pull cyberdojo/version-reporter:$IMAGE_TAG
#    - kosli expect deployment cyberdojo/version-reporter:$IMAGE_TAG
#        --artifact-type docker
#        --description "Deployed to aws-beta in Gitlab pipeline"
#        --environment aws-beta
#    - DEPLOY_TO_AWS_BETA

# then manual approval step

# then prod-deployment-job

# TODO: in build-job make artifact fingerprint available to subsequent jobs
#       don't do [docker pull] commands
#       replace --artifact-type flag with --fingerprint flag
