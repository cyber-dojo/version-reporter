image: registry.gitlab.com/cyber-dojo/version-reporter:v1
stages:
  - .pre
  - build
  - test
  - deployment

variables:
  KOSLI_DRY_RUN: "False"
  KOSLI_ORG: cyber-dojo
  KOSLI_FLOW: version-reporter
  DOCKER_TLS_CERTDIR: "/certs"

create-kosli-flow:
  stage: .pre
  script:
    - kosli create flow $KOSLI_FLOW
        --description="UX for git+image version-reporter"
        --template=artifact,branch-coverage
#        --template=artifact,branch-coverage,security-scan,pull-request,manual-approval

build-job:
  stage: build
  needs: ["create-kosli-flow"]
  services:
    - docker:24.0.5-dind
  artifacts:
    paths: [ output/ ]
  script:
    - source ./sh/echo_versioner_env_vars.sh
    - export $(echo_versioner_env_vars)
    - docker-compose build --build-arg COMMIT_SHA=$CI_COMMIT_SHA
    - IMAGE_TAG=${CI_COMMIT_SHA:0:7}
    - echo "${DOCKER_PASS}" | docker login --username "${DOCKER_USER}" --password-stdin
    - docker push cyberdojo/version-reporter:$IMAGE_TAG
    - kosli report artifact cyberdojo/version-reporter:$IMAGE_TAG --artifact-type=docker
    - FINGERPRINT=$(kosli fingerprint cyberdojo/version-reporter:$IMAGE_TAG --artifact-type=docker)
    - mkdir output
    - echo $FINGERPRINT > output/fingerprint

branch-coverage-job:
  stage: test
  needs: ["build-job"]
  services:
    - docker:24.0.5-dind
  artifacts:
    paths: [ output/ ]
  script:
    - source ./sh/run_tests_with_coverage.sh
    - if run_tests_with_coverage; then KOSLI_COMPLIANT=true; else KOSLI_COMPLIANT=false; fi
    - IMAGE_TAG=${CI_COMMIT_SHA:0:7}
    - kosli report evidence artifact generic cyberdojo/version-reporter:$IMAGE_TAG
          --fingerprint=$(cat output/fingerprint)
          --compliant=$KOSLI_COMPLIANT
          --description="server & client branch-coverage reports"
          --name=branch-coverage
          --user-data=./test/evidence.json

# security-scan-job:
#   stage: test
#   needs: [ "build-job" ]
#   artifacts:
#     paths: [ output/ ]
#   script:
#     - set +e
#     - ls -la /bin/
# #    - snyk --version
# #    - IMAGE_TAG=${CI_COMMIT_SHA:0:7}
# #    - snyk container test cyberdojo/version-reporter:$IMAGE_TAG
# #        --file=Dockerfile
# #        --json-file-output=snyk.json
# #        --policy-path=.snyk
# #    - kosli report evidence artifact snyk cyberdojo/version-reporter:$IMAGE_TAG
# #        --fingerprint=$(cat output/fingerprint)
# #        --name=security-scan
# #        --scan-results=snyk.json

#pull-request-job:
#  stage: test
#  needs: [ "build-job" ]
#  artifacts:
#    paths: [ output/ ]
#  script:
#    - IMAGE_TAG=${CI_COMMIT_SHA:0:7}
#    - kosli report evidence artifact pullrequest gitlab cyberdojo/version-reporter:$IMAGE_TAG
#        --fingerprint=$(cat output/fingerprint)
#        --name=pull-request
#        --gitlab-token=?????

sdlc-gate-job:
  stage: test
  needs:
    - branch-coverage-job
    # - security-scan-job
#    - pull-request-job
  artifacts:
    paths: [ output/ ]
  script:
    - IMAGE_TAG=${CI_COMMIT_SHA:0:7}
    - kosli assert artifact cyberdojo/version-reporter:$IMAGE_TAG
        --fingerprint=$(cat output/fingerprint)

beta-deployment-job:
  needs: [ "sdlc-gate-job" ]
  stage: deployment
  artifacts:
    paths: [ output/ ]
  variables:
    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID_BETA}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY_BETA}
  script:
    - IMAGE_TAG=${CI_COMMIT_SHA:0:7}
    - kosli expect deployment cyberdojo/version-reporter:$IMAGE_TAG
        --fingerprint=$(cat output/fingerprint)
        --description "Deployed to aws-beta in Gitlab pipeline"
        --environment aws-beta
    - export TF_VAR_TAGGED_IMAGE=cyberdojo/version-reporter:$IMAGE_TAG
    - cd deployment/terraform && tf.sh apply

#prod-deployment-job:
#  needs: [ "beta-deployment-job" ]
#  stage: deployment
#  script:
#    - IMAGE_TAG=${CI_COMMIT_SHA:0:7}
#    - kosli expect deployment cyberdojo/version-reporter:$IMAGE_TAG
#        --fingerprint=$(cat output/fingerprint)
#        --description "Deployed to aws-prod in Gitlab pipeline"
#        --environment aws-prod
#    - DEPLOY_TO_AWS_PROD

