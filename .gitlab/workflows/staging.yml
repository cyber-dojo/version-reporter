# Secondary workflow that reports to https://staging.app.kosli.com
image: registry.gitlab.com/cyber-dojo/version-reporter:v1

.only-main:
  only:
    - main

stages:
  - kosli-trail
  - wait-for-image
  - test-image
  - sdlc-gate
  - expect-beta
  - expect-prod

variables:
  KOSLI_DRY_RUN: "False"
  KOSLI_HOST: https://staging.app.kosli.com
  KOSLI_ORG: cyber-dojo
  KOSLI_FLOW: version-reporter
  DOCKER_TLS_CERTDIR: "/certs"

start-kosli-trail:
  extends: [ .only-main ]
  stage: kosli-trail
  script:
    - kosli create flow $KOSLI_FLOW
        --description="UX for git+image version-reporter"
        --template=artifact,branch-coverage,security-scan,pull-request

wait-for-image:
  extends: [ .only-main ]
  stage: wait-for-image
  needs: [ start-kosli-trail ]
  services: [ "docker:24.0.5-dind" ]
  artifacts:
    paths: [ output/ ]
  script:
    - ./sh/wait_for_image.sh
    - TAGGED_IMAGE=cyberdojo/version-reporter:${CI_COMMIT_SHA:0:7}
    - kosli report artifact $TAGGED_IMAGE --artifact-type=docker
    - FINGERPRINT=$(kosli fingerprint $TAGGED_IMAGE --artifact-type=docker)
    - mkdir output
    - echo $FINGERPRINT  > output/fingerprint
    - echo $TAGGED_IMAGE > output/tagged_image

branch-coverage:
  extends: [ .only-main ]
  stage: test-image
  needs: [ wait-for-image ]
  services: [ "docker:24.0.5-dind" ]
  artifacts:
    paths: [ output/ ]
  script:
    - source ./sh/run_tests_with_coverage.sh
    - if run_tests_with_coverage; then KOSLI_COMPLIANT=true; else KOSLI_COMPLIANT=false; fi
    - kosli report evidence artifact generic $(cat output/tagged_image)
        --fingerprint=$(cat output/fingerprint)
        --compliant=$KOSLI_COMPLIANT
        --description="server & client branch-coverage reports"
        --name=branch-coverage
        --user-data=./test/evidence.json

security-scan:
  extends: [ .only-main ]
  image: registry.gitlab.com/cyber-dojo/version-reporter:v1-ubuntu
  stage: test-image
  needs: [ wait-for-image ]
  artifacts:
    paths: [ output/ ]
  script:
    - set +e
    - snyk container test $(cat output/tagged_image)
        --file=Dockerfile
        --json-file-output=snyk.json
        --policy-path=.snyk
    - kosli report evidence artifact snyk $(cat output/tagged_image)
        --fingerprint=$(cat output/fingerprint)
        --name=security-scan
        --scan-results=snyk.json

pull-request:
  extends: [ .only-main ]
  stage: test-image
  needs: [ wait-for-image ]
  artifacts:
    paths: [ output/ ]
  script:
    - kosli report evidence artifact pullrequest gitlab $(cat output/tagged_image)
        --fingerprint=$(cat output/fingerprint)
        --name=pull-request
        --gitlab-token=$KOSLI_GITLAB_TOKEN

sdlc-gate:
  extends: [ .only-main ]
  stage: sdlc-gate
  needs:
    - branch-coverage
    - security-scan
    - pull-request
  artifacts:
    paths: [ output/ ]
  script:
    - kosli assert artifact $(cat output/tagged_image)
        --fingerprint=$(cat output/fingerprint)

expect-beta-deployment:
  extends: [ .only-main ]
  stage: expect-beta
  needs: [ sdlc-gate ]
  services: [ "docker:24.0.5-dind" ]
  artifacts:
    paths: [ output/ ]
  variables:
    KOSLI_ENVIRONMENT_NAME: aws-beta
  script:
    - kosli expect deployment $(cat output/tagged_image)
        --fingerprint=$(cat output/fingerprint)
        --description "Deployed to ${KOSLI_ENVIRONMENT_NAME} in Gitlab pipeline"
        --environment ${KOSLI_ENVIRONMENT_NAME}

approval:
  extends: [ .only-main ]
  stage: approval
  needs: [ expect-beta-deployment ]
  artifacts:
    paths: [ output/ ]
  when: manual
  allow_failure: false
  script:
    - git fetch origin production # https://stackoverflow.com/questions/65686740/how-to-fetch-entire-repository-with-gitlab-ci-cd
    - kosli report approval $(cat output/tagged_image)
        --fingerprint=$(cat output/fingerprint)
        --description="Approved in Gitlab pipeline"
        --oldest-commit=origin/production
        --approver="${GITLAB_USER_NAME} <${GITLAB_USER_EMAIL}>"

expect-prod-deployment:
  extends: [ .only-main ]
  stage: expect-prod
  needs: [ approval ]
  services: [ "docker:24.0.5-dind" ]
  artifacts:
    paths: [ output/ ]
  variables:
    KOSLI_ENVIRONMENT_NAME: aws-prod
  script:
    - kosli expect deployment $(cat output/tagged_image)
        --fingerprint=$(cat output/fingerprint)
        --description "Deployed to ${KOSLI_ENVIRONMENT_NAME} in Gitlab pipeline"
        --environment ${KOSLI_ENVIRONMENT_NAME}
